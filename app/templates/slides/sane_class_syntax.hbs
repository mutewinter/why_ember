<h2>Ember.Object.extend</h2>

{{#code exampleViewClassName="App.LogView"}}
# Define the Class with Instance Methods
Squid = Ember.Object.extend()

# Now we make a class method.
Squid.reopenClass
  squidBuilder: (color, wants) ->
    @create(color: color, wants: wants)

blackSquid = Squid.squidBuilder('green', 'to derp less')
log blackSquid.get('color')
{{/code}}

<h2>Ember.Object.create</h2>

{{#code exampleViewClassName="App.LogView"}}
# Skip Straight to an Object Instance
blackSquid = Ember.Object.create(
  color: 'black'
  wants: 'to be a potato'
)

log blackSquid.get('color')
{{/code}}

{{#view App.NotesView}}
  <p>
    The sane class syntax of Ember allows you to not think twice about using
    classes and instance objects. The added benefits of being able to use
    computed properties and getters and setters is just icing on the cake.
  </p>
{{/view}}

<footer class="sane subtle text-center">
  <a href="http://www.youtube.com/watch?v=AkjcxlAuyLI&t=12m22s">
    What do you mean "sane"?
  </a>
</footer>
