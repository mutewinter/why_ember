<ul>
  <li>Almost No Code</li>
{{#view App.NotesView}}
  <p>
    Which is really important since tweaking class values is something you do
    frequently in a web application.
  </p>
{{/view}}
  <li>Works Great with Computed Properties</li>
  <li>See <a href="http://emberjs.com/api/classes/Ember.View.html">Ember.View's
    API Documentation </a> for more</li>
</ul>

{{#code exampleViewClassName="App.ExampleContainerView"}}
ChildView = Ember.View.extend(
  classNames: 'example-child-view'
  classNameBindings: 'isHidden:hidden colorClass'.w()
  template: Handlebars.compile('Child View')

  # Defaults
  isHidden: false
  color: 'red'

  colorClass: (->
    "color-#{@get('color')}"
  ).property('color')
)

firstChildView = ChildView.create()
secondChildView = ChildView.create()

containerView.get('childViews').pushObject firstChildView
containerView.get('childViews').pushObject secondChildView

# Uncomment the lines below to see the changes to the view
# firstChildView.set('isHidden', true)
# secondChildView.set('color', 'green')
{{/code}}

<p>
  Here's the CSS that governs the example above.
</p>
{{#code noToolbar=true language="css"}}
.example-child-view.color-red {
  color: red;
}
.example-child-view.color-green {
  color: green;
}
.example-child-view.color-blue {
  color: blue;
}
.example-child-view.hidden {
  display: none;
}
{{/code}}

{{#view App.NotesView}}
  <p>
    The syntactic sugar for declaring classNameBindings is confusing at first,
    but is immediately understandable. By using an array of strings and the
    String.w() method, class bindings end up resembling regular class
    definitions.
  </p>
{{/view}}
